<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.wwd</groupId>
  <artifactId>crm</artifactId>
  <version>2025.1.1</version>

  <!-- 所有子模块 -->
  <modules>
    <module>web</module>
    <module>process</module>
    <module>gateway</module>
    <module>customer</module>
    <module>order</module>
    <module>common</module>
  </modules>
  <packaging>pom</packaging>

  <name>crm</name>
  <url>http://www.wwd.com</url>

  <!-- 所有属性配置 -->
  <properties>
    <java.version>8</java.version>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
    <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- 第三方依赖版本管理 -->
    <mybatis.version>2.3.1</mybatis.version>
    <mysql.version>8.0.33</mysql.version>
  </properties>

  <!-- spring boot帮助管理spring官方维护的依赖、插件，实现版本兼容和自动配置 -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.1</version>
  </parent>


  <!-- 所有子模块共享的依赖 -->
  <dependencies>
    <!-- spring boot的web启动器，帮助快速引入web应用开发所需的依赖-->
    <!-- 其中包括spring-core、spring-context、spring-beans、spring-aop、spring-web、spring-webmvc、spring-boot-starter-tomcat、spring-boot-starter-json -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- mybatis维护的spring boot的mybatis启动器，帮助快速引入mybatis持久层开发所需的依赖 -->
    <!-- 其中包括mybatis、mybatis-spring -->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>${mybatis.version}</version>
    </dependency>

    <!--  MySQL依赖  -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql.version}</version>
    </dependency>

    <!--
      1、支持 Java Bean 合法验证：可以使用注解（如 @NotNull, @Size, @Min, @Max 等）对字段进行验证。
      2、自动验证请求数据：在 Spring MVC 或 RESTful API 控制器中，你可以通过 @Valid 或 @Validated 注解标记请求体参数，让 Spring 自动进行数据验证。
      3、结合 Spring 表单数据绑定：（如 @ModelAttribute）一起使用，自动验证用户提交的表单数据。
      4、验证错误处理：Spring 会抛出 MethodArgumentNotValidException 异常。可以通过 @ControllerAdvice 或 @ExceptionHandler 来处理这些验证错误，并返回适当的错误信息给客户端。
         -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- Lombok帮助简化代码编写，通过注解自动生成类中常见的方法 -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>

  </dependencies>



  <!-- 所有子模块可选的依赖 -->
  <dependencyManagement>
    <dependencies>

    </dependencies>
  </dependencyManagement>

  <build>
    <finalName>crm</finalName>
    <resources>

    </resources>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
        <!--    // Spring Boot自动配置了：
        // 1. 数据源和连接池
        // 2. MyBatis SqlSessionFactory
        // 3. MyBatis映射器扫描
        // 4. 事务管理
        // 5. Spring MVC配置
        // 6. 静态资源处理
        // 7. 等等...-->